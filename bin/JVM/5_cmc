堆的回顾
串行收集器
并行收集器
CMS收集器
Tomcat实例演示
- 串行收集器
	效率高
	可能会产生较长的停顿（只使用一个线程 多核的情况下无法发挥计算机的性能）
	-XX:+UseSerialGC
	新生代、老年代使用串行回收
	新生代复制算法
	老年代标记-压缩
并行收集器
	ParNew并行收集器
		-XX:+UseParNewGC
		新生代并行(多线程进行)   应用程序-多线程gc-
		老年代串行
		Serial收集器新生代的并行版本
		复制算法
		多线程，需要多核支持
		-XX:ParallelGCThreads 限制线程数量
	
	
	
	Parallel收集器并行收集器
		类似ParNew
		新生代复制算法
		老年代 标记-压缩
		更加关注吞吐量
		-XX:+UseParallelGC 
		使用Parallel收集器+ 老年代串行
		-XX:+UseParallelOldGC
		使用Parallel收集器+ 并行老年代
		
	-XX:MaxGCPauseMills
	最大停顿时间，单位毫秒
	GC尽力保证回收时间不超过设定值
	-XX:GCTimeRatio
	0-100的取值范围
	垃圾收集时间占总时间的比
	默认99，即最大允许1%时间做GC
	这两个参数是矛盾的。因为停顿时间和吞吐量不可能同时调优
	
	
CMS收集器
	Concurrent Mark Sweep 并发标记清除   与应用程序一起执行
	标记-清除算法
	与标记-压缩相比
	并发阶段会降低吞吐量
	老年代收集器（新生代使用ParNew）
	-XX:+UseConcMarkSweepGC
	
	CMS运行过程比较复杂，着重实现了标记的过程，可分为
	初始标记
	根可以直接关联到的对象
	速度快
	并发标记（和用户线程一起）
	主要标记过程，标记全部对象
	重新标记
	由于并发标记时，用户线程依然运行，因此在正式清理前，再做修正
	并发清除（和用户线程一起）
	基于标记结果，直接清理对象
	
	